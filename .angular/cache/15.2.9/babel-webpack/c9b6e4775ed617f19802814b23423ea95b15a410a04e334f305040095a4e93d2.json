{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class AiService {\n  constructor() {\n    this.apiKey = \"wIg3knavM2nhxmnkZhWRz_aE-pjj0g8yv1wLKJJZD4gd\"; //.ENV file instead\n    this.apiUrl = \"https://api.eu-gb.natural-language-understanding.watson.cloud.ibm.com/instances/7b0bbba1-61fb-46d4-9a7d-2441adc60b8f\";\n    this.analyseUrl = `${this.apiUrl}/v1/analyze?version=2019-07-12`;\n  }\n  analyse(text) {\n    //json data to analyse and specify what I want to understand from the AI (features)\n    const data = {\n      \"text\": text,\n      //\"url\": \"http://newsroom.ibm.com/Guerbet-and-IBM-Watson-Health-Announce-Strategic-Partnership-for-Artificial-Intelligence-in-Medical-Imaging-Liver\",\n      \"features\": {\n        \"sentiment\": {},\n        \"categories\": {},\n        \"concepts\": {},\n        \"entities\": {},\n        \"keywords\": {},\n        \"emotion\": {}\n      }\n    };\n    return fetch(this.analyseUrl, {\n      method: \"POST\",\n      headers: {\n        'Authorization': `Basic ${btoa(`apikey:${this.apiKey}`)}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data) //passing the data we want analysing\n    }).then(response => response.json()) //responding with AI values\n    .catch(error => {\n      console.log(error);\n      throw error;\n    });\n  }\n  static #_ = this.ɵfac = function AiService_Factory(t) {\n    return new (t || AiService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AiService,\n    factory: AiService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";AAKA,OAAM,MAAOA,SAAS;EAEpBC;IAEQ,WAAM,GAAG,8CAA8C,EAAC;IACxD,WAAM,GAAG,sHAAsH;IAEvI,eAAU,GAAG,GAAG,IAAI,CAACC,MAAM,gCAAgC;EAL3C;EAOhBC,OAAO,CAACC,IAAY;IAElB;IACA,MAAMC,IAAI,GAAG;MACX,MAAM,EAAED,IAAI;MACZ;MACA,UAAU,EAAE;QACV,WAAW,EAAE,EAAE;QACf,YAAY,EAAE,EAAE;QAChB,UAAU,EAAE,EAAE;QACd,UAAU,EAAE,EAAE;QACd,UAAU,EAAE,EAAE;QACd,SAAS,EAAE;;KAEd;IAED,OAAOE,KAAK,CAAC,IAAI,CAACC,UAAU,EAAE;MAC5BC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,eAAe,EAAE,SAASC,IAAI,CAAC,UAAU,IAAI,CAACC,MAAM,EAAE,CAAC,EAAE;QACzD,cAAc,EAAE;OACjB;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,IAAI,CAAC,CAAC;KAC5B,CAAC,CACDU,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,EAAE,CAAC,CAAC;IAAA,CAClCC,KAAK,CAACC,KAAK,IAAG;MACbC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MAClB,MAAMA,KAAK;IACb,CAAC,CAAC;EAEJ;EAAC;qBAvCUnB,SAAS;EAAA;EAAA;WAATA,SAAS;IAAAsB,SAATtB,SAAS;IAAAuB,YAFR;EAAM","names":["AiService","constructor","apiUrl","analyse","text","data","fetch","analyseUrl","method","headers","btoa","apiKey","body","JSON","stringify","then","response","json","catch","error","console","log","factory","providedIn"],"sourceRoot":"","sources":["/Users/ow/Desktop/DV300/what-you-say/src/app/ai.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AiService {\n\n  constructor() { }\n\n  private apiKey = \"wIg3knavM2nhxmnkZhWRz_aE-pjj0g8yv1wLKJJZD4gd\" //.ENV file instead\n  private apiUrl = \"https://api.eu-gb.natural-language-understanding.watson.cloud.ibm.com/instances/7b0bbba1-61fb-46d4-9a7d-2441adc60b8f\"\n\n  analyseUrl = `${this.apiUrl}/v1/analyze?version=2019-07-12`\n\n  analyse(text: string) {\n\n    //json data to analyse and specify what I want to understand from the AI (features)\n    const data = {\n      \"text\": text,\n      //\"url\": \"http://newsroom.ibm.com/Guerbet-and-IBM-Watson-Health-Announce-Strategic-Partnership-for-Artificial-Intelligence-in-Medical-Imaging-Liver\",\n      \"features\": {\n        \"sentiment\": {},\n        \"categories\": {},\n        \"concepts\": {},\n        \"entities\": {},\n        \"keywords\": {},\n        \"emotion\": {}\n      }\n    }\n\n    return fetch(this.analyseUrl, {\n      method: \"POST\",\n      headers: {\n        'Authorization': `Basic ${btoa(`apikey:${this.apiKey}`)}`, //passing api key\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data) //passing the data we want analysing\n    })\n    .then(response => response.json()) //responding with AI values\n    .catch(error => {\n      console.log(error)\n      throw error;\n    })\n\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}